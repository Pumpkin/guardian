#!/usr/bin/env ruby -Ilib

$stderr.sync = $stdout.sync = true

require 'bundler/setup'
require 'heroku/auth'
require 'heroku/command/base'
require 'heroku/client/heroku_postgresql'
require 'heroku/helpers/heroku_postgresql'

usage = 'rebuild <heroku app>'
HEROKU_APP_NAME = ARGV.shift or abort usage

class ResetDatabase < Heroku::Command::Base
  include Heroku::Helpers::HerokuPostgresql
  def reset
    Heroku::Client::HerokuPostgresql.new(database).reset
  end

  def app()          HEROKU_APP_NAME end
  def database()     hpg_resolve('DATABASE_URL') end
  def database_url() database.url end
end

# Setup the production database before queue_classic is loaded.
ENV['DATABASE_URL'] ||= ResetDatabase.new.database_url
require 'guardian/bucket'


print 'Scaling down clock... '
new_qty = Heroku::Auth.api.post_ps_scale(HEROKU_APP_NAME, 'clock', 0).body
puts "scaled to #{new_qty}"

print 'Scaling down workers... '
new_qty = Heroku::Auth.api.post_ps_scale(HEROKU_APP_NAME, 'worker', 0).body
puts "scaled to #{new_qty}"

print 'Resetting database... '
ResetDatabase.new.reset
puts 'done'

print 'Importing schema... '
Guardian::Database.execute "SET client_min_messages TO 'warning'"
Guardian::Database.execute File.read('db/schema.sql')
QC::Setup.create
puts 'done'

print 'Scaling up clock... '
new_qty = Heroku::Auth.api.post_ps_scale(HEROKU_APP_NAME, 'clock', 1).body
puts "scaled to #{ new_qty }"

print 'Scaling up workers... '
new_qty = Heroku::Auth.api.post_ps_scale(HEROKU_APP_NAME, 'worker', 15).body
puts "scaled to #{ new_qty }"
